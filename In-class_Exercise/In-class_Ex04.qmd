---
title: "In-class Exercise 4"
author: "Law Shiang Rou"
date: 4 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format:
  html:
    code-fold: "show"
    code-summary: "Hide the code"
    code-block-border-left: "#63B9A0"
    code-line-numbers: true
editor: visual
---

# Part 1: Statistical visualization
### Loading required packages
```{r}
pacman::p_load(plotly, DT, patchwork, tidyverse, ggstatsplot)
```

### Importing data
```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

### Working with Plot_ly() method
```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

#### Changing color with color palette
```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = "Set1")
```

#### Changing to self-defined colors
```{r}
my_colors <- c("pink","skyblue","lightgreen","grey")
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = my_colors)
```

### Working with ggplotly() method
```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

### Coordinated Multiple Views with plotly
```{r}
d <- highlight_key(exam_data)  #<<
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

### Working with ggstatsplot
#### Two-sample mean test: ggbetweenstats()
```{r}
ggbetweenstats(
  data = exam_data,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

#### Significant Test of Correlation: ggscatterstats()
```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS,
  y = ENGLISH,
  marginal = TRUE,
  )
```


# Part 2: Visualizing models
### Loading packages
```{r}
pacman::p_load(readxl, performance, parameters, see)
```
### Importing data
```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

### Multiple Regression Model using lm()
```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Model Diagnostic: checking for multicolinearity:
```{r}
check_collinearity(model)
```
### Visualize multicollinearity
VIF, log scaled of more than 10 = multicollinearity that needs to be addressed.
```{r}
check_c <- check_collinearity(model)
plot(check_c)
```
### Remove "Mfg_Year" from model due to collinearity
```{r}
model1 <- lm(Price ~ Age_08_04 + Weight + KM
             + Guarantee_Period, data = car_resale)
```

### Check normality assumption
```{r}
check_n <- check_normality(model1)
```
```{r}
plot(check_n)
```
### Check heteroscedasticity
```{r}
check_h <- check_heteroscedasticity(model1)
```
```{r}
plot(check_h)
```

### Complete check
```{r fig.height = 10, fig.width = 10, align = "center"}
check_model(model1)
```

### Visualising Regression Parameters: see methods
```{r}
plot(parameters(model1))
```

### Visualising Regression Parameters: ggcoefstats() methods
```{r}
ggcoefstats(model1, 
            output = "plot")
```

# Part 3: Visualising uncertainty (Standard errors)
```{r}
pacman::p_load(crosstalk, DT, ggdist, gganimate)
```

```{r}
my_sum <- exam_data %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

```{r}
knitr::kable(head(my_sum), format = 'html')
```

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.8,
           alpha=1) +
  ggtitle("Standard error of mean 
          maths score by race")
```





