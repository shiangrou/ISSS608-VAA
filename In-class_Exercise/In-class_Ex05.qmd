---
title: "In Class Exercise 5"
author: "Law Shiang Rou"
date: 11 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format:
  html:
    code-fold: "show"
    code-summary: "Hide the code"
    code-block-border-left: "#63B9A0"
    code-line-numbers: true
editor: visual
---
## Plot correlation matrix

### Load the required packages
```{r}
pacman::p_load(corrplot, tidyverse, ggstatsplot)
```

### Import the data
```{r}
wine <- read_csv("data/wine_quality.csv")
```

### Build a basic correlation matrix
```{r}
pairs(wine[,1:11])
```

### Build basic correlation matrix (only lower corner)
```{r}
pairs(wine[,1:11], upper.panel = NULL)
```

### Plot correlation matrix using ggcorrmat()
```{r}
#|fig-width = 15
#|fig-height = 15
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  sig.level = 0.05,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 8),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are not significant at p < 0.05"
)
```

### Plot correlation matrix using corrplot()
corrplot has more features as compared to ggcorrmat - geometry object and ordering method. A correlation matrix needs to be calculated first before corrplot can be ploted.
```{r}
wine.cor <- cor(wine[, 1:11])
```

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```
We can choose to reorder the correlation matrix using hclust (grouping the similar variables together)

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

## Use ternary plot to visualize 3 dimensions
```{r}
pacman::p_load(ggtern, plotly)
```

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

### Import the data
```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

```{r}
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2018") +
  theme_rgbw()
```
### Plot interactive ternary diagram
```{r}
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

## Plot heatmap
```{r}
pacman::p_load(seriation, dendextend, heatmaply)
```

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

### Transform the data frame
Make "country" the row name (index) so that country will be used as label in heatmap
```{r}
row.names(wh) <- wh$Country
```

Transform the dataframe into a matrix (take columns number 4 and 7-12)
```{r}
wh1 <- dplyr::select(wh, c(3, 7:12))
wh_matrix <- data.matrix(wh)
```

### Create heatmap using heatmaply 
-c means excluding the columns
```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 5,
          fontsize_col = 5,
          main="World Happiness Score and Variables by Country, 2018 \nDataTransformation using Normalise Method",
          xlab = "World Happiness Indicators",
          ylab = "World Countries"
          )
```

